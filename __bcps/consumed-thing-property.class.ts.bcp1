import { AsyncTask, IAsyncTaskConstraint, IOptionalAbortableOptions } from '@lirx/async-task';
import { IPushSourceWithBackPressure } from '@lirx/stream';

export type IThingValue =
  | null
  | boolean
  | number
  | string
  | object
  | IThingValue[]
  ;

export interface IThingPropertyReadOptions extends IOptionalAbortableOptions {

}

export interface IThingPropertyWriteOptions extends IOptionalAbortableOptions {

}

export abstract class ThingProperty<GValue extends IAsyncTaskConstraint<GValue, IThingValue>> {
  abstract read(
    options?: IThingPropertyReadOptions,
  ): AsyncTask<GValue>;

  abstract write(
    value: GValue,
    options?: IThingPropertyWriteOptions,
  ): AsyncTask<void>;

  abstract observe(): IPushSourceWithBackPressure<GValue>;
}



/*-------------*/


// export interface IHttpThingPropertyReadOptions extends IThingPropertyReadOptions {
//   body?: any;
// }
//
// export class HttpThingProperty<GValue extends IAsyncTaskConstraint<GValue, IThingValue>> extends ThingProperty<GValue> {
//   read(
//     options?: IHttpThingPropertyReadOptions,
//   ): AsyncTask<GValue> {
//
//   }
// }

